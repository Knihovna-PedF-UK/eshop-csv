#!/usr/bin/env texlua 
-- konfigurovatelnej export alephovskýho xml do csv
-- arg[1] název 
-- arg[2] -- seznam polí oddělených čárkou (volitelný)
--

local input = arg[1]

local parser= require "parse_prir"
parse_format_string = parser.parse_format_string
parse_format = parser.parse_format
edit = parser.edit

local map = parser.field_map

local function print_help()
  print "convert aleph xml to csv for moocommerce"
  print "Usage: "
  print "  eshop-csv prirsobor "
  print "Dostupné pole pro formát:"
  for k,v in pairs(map) do
    print(k,v)
  end
end

-- obrázky produktů
-- vybíráme je náhodhně
math.randomseed(os.time())
-- ale zkusíme to nejdřív bez extension
local image_extension = ""


local images = {
  "mikolaj-DCzpr09cTXY-unsplash",
  "jonas-jacobsson-0FRJ2SCuY4k-unsplash",
  "john-mark-smith-F_cHIM0Kcy4-unsplash",
  "blaz-photo-zMRLZh40kms-unsplash",
  "fang-wei-lin-H1IRUS1vEFA-unsplash"
}



if not input then 
  print_help()
  os.exit()
end

local konspekt_groups = {
"Antropologie", 
"Biologické vědy",
"Dramatické umění",
"Ekonomické vědy",
"Filozofie a náboženství",
"Fyzika a příbuzné vědy",
"Geografie a vědy o zemi",
"Historie a biografie",
"Hudba",
"Chemie",
"Lingvistika a literární věda",
"Informační vědy",
"Matematika",
"Lékařství",
"Politické vědy",
"Právo",
"Psychologie",
"Sociologie",
"Technika",
"Tělesná výchova a sport",
"Výtvarné umění a architektura",
"Výchova a vzdělávání",
"Výpočetní technika",
"Zemědělství",
"Beletrie",
"Literatura pro děti a mládež"
}


local field_names = '"ID ","Type ","SKU ","Name ","Published ","Is featured? ","Visibility in catalog ","Short description ","Description ","Date sale price starts ","Date sale price ends ","Tax status ","Tax class ","In stock? ","Stock ","Backorders allowed? ","Sold individually? ","Weight (lbs) ","Length (in) ","Width (in) ","Height (in) ","Allow customer reviews? ","Purchase note ","Sale price ","Regular price ","Categories ","Tags ","Shipping class ","Images ","Download limit ","Download expiry days ","Parent ","Grouped products ","Upsells ","Cross-sells ","External URL ","Button text ","Position ","Attribute 1 name ","Attribute 1 value(s) ","Attribute 1 visible ","Attribute 1 global ","Download 1 name ","Download 1 URL "'
local function new_csv_record(record)
  local new = {
    record.id,   -- ID 	id 	100 	Defining this will overwrite data for that ID on import.
    "simple",-- Type 	type 	simple, variation, virtual 	Product Type. Valid values: simple, variable, grouped, external, variation, virtual, downloadable. Multiple types can be used CSV separated.
    record.signatura,-- SKU 	sku 	my-sku 	Required. Auto-generated if missing.
    record.name,-- Name 	name 	My Product Name 	Required.
    1, -- Published 	status 	1 	1 for published, 0 for private, -1 for draft.
    0,-- Is featured? 	featured 	1 	1 or 0
    "visible",-- Visibility in catalog 	catalog_visibility 	visible 	Supported values: visible, catalog, search, hidden
    record.short,-- Short description 	short_description 	This is a product.
    record.description,-- Description 	description 	This is more information about a product.
    "",-- Date sale price starts 	date_on_sale_from 	2013-06-07 10:53:15 	Date or leave blank.
    "",-- Date sale price ends 	date_on_sale_to 	2013-06-07 10:53:15 	Date or leave blank.
    "none",-- Tax status 	tax_status 	taxable 	Supported values: taxable, shipping, none
    "",-- Tax class 	tax_class 	standard 	Can use any existing tax class.
    1,-- In stock? 	stock_status 	1 	1 or 0
    record.count,-- Stock 	manage_stock / stock_quantity 	20 	Numeric stock level enables stock management. parent can be used for variations. Blank = no stock management.
    0,-- Low stock amount 	low_stock_amount 	3 	Empty or a number
    0,-- Backorders allowed? 	backorders 	1 	1, 0, or notify
    1,-- Sold individually? 	sold_individually 	1 	1 or 0
    "", -- Weight (unit) 	weight 	100 	Parse only numbers.
    "",-- Length (unit) 	length 	20 	Parse only numbers.
    "",-- Width (unit) 	width 	20 	Parse only numbers.
    "",-- Height (unit) 	height 	20 	Parse only numbers.
    -- "",-- Allow customer reviews? 	reviews_allowed 	1 	1 or 0
    "",-- Purchase Note 	purchase_note 	Thanks for buying it buddy.
    5,-- Sale price 	sale_price 	20.99 	Sale price.
    5,-- Regular price 	regular_price 	24.99 	Regular price.
    record.categories,-- Categories 	category_ids 	Category 1, Category 1 > Category 2 	CSV list of categories. > used for hierarchy.
    record.categories,-- Tags 	tag_ids 	Tag 1, Tag 2 	CSV list of tags.
    "",-- Shipping class 	shipping_class_id 	Name 	Name of shipping class
    images[math.random(#images)] .. image_extension,-- Images 	image_id / gallery_image_ids 	http://somewhere.com/image.jpg, http://somewhere.com/image2.jpg 	First is featured image.
    "",-- Download limit 	download_limit 	1 	n/a or a limit.
    "",-- Download expiry days 	download_expiry 	1 	n/a or a day limit.
    "",-- Parent 	parent_id 	id:100, SKU-1 	Set parent ID. Used for variations. Can be just a numeric ID e.g. id:100 or a SKU. Export will use SKU when possible.
    "",-- Grouped products 	children 	id:100, id:101, SKU-1, SKU-2 	List of IDs. Can be just a numeric ID e.g. id:100 or a SKU. Export will use SKU when possible.
    "",-- Upsells 	upsell_ids 	id:100, id:101, SKU-1, SKU-2 	List of IDs. Can be just a numeric ID e.g. id:100 or a SKU. Export will use SKU when possible.
    "",-- Cross-sells 	cross_sell_ids 	id:100, id:101, SKU-1, SKU-2 	List of IDs. Can be just a numeric ID e.g. id:100 or a SKU. Export will use SKU when possible.
    "",-- External URL 	product_url 	https://mercantile.wordpress.org/product/wordpress-pennant/ 	Product external URL.
    "",-- Button text 	button_text 	Buy on the WordPress swag store! 	Custom product "buy" button.
    "",-- Position 	menu_order 	1 	Menu order, used for sorting.
    "",-- Attribute 1 name 	attributes 	Color 	Looks for global attribute or uses text if not found. Include as many as needed. "Used for variations" is set automatically.
    "",-- Attribute 1 value(s) 	attributes 	Blue, Red, Green 	List of values. Variations only need 1 value. First is used if multiple get provided.
    "",-- Attribute 1 default 	default_attributes 	Blue 	Default value for variable products.
    "",-- Attribute 1 visible 	attributes 	1 	1 or 0. Mapping screen labels this as "Attribute Visibility"
    "",-- Attribute 1 global 	attributes 	1 	1 or 0. Mapping screen labels this as "Is a global attribute?"
    "",-- Download 1 name 	downloads 	Download 1
    ""-- Download 1 URL 	downloads 	url.zipK
  }
  return new
end


local function convert(format, data)
  -- ziskat nazvy poli
  local name_fields = parse_format_string(format)
  local new = {}
  -- získat pole, která budem tisknout ze záznamu
  local fields = parse_format(format)
  for _, row in ipairs(data) do
    local t = {}
    -- projít pole v záznamu a vytvořit tabulku, kterou budeme tisknout
    for i, f in ipairs(fields) do
      local field_name = name_fields[i]
      t[field_name] = edit(field_name, row[f] or "")
    end
    new[#new + 1] = t
  end
  return new
end

local function callnobase(callno)
  local callno = callno or ""
  -- local base, rest = callno:match("(%d?%a+[%d%]+)(.*)")
  -- odstranit písmenka na konci
  return callno:gsub("[%aáíéěčíňóřšťúůž]+$", "")
end

local function make_name(rec)
  return table.concat({rec.nazev, rec.autor}, ", ")
end

local function make_description(rec)
  -- udělat něco jako citaci. Je třeba odstranit chybnou diakritiku a neznámé roky vydání.
  return table.concat({rec.autor, rec.nazev, rec.vydavatel, rec.rok, rec.isbn}, ". "):gsub("^%.%s*", ""):gsub("%s*%.", "."):gsub("%s*0000%.", "")
end

local function make_categories(rec)
  local categories  = {}
  -- konspekt looks like 8 * 11
  for number in rec.konspekt:gmatch("(%d+)") do
    categories[#categories+1] = konspekt_groups[tonumber(number)]
  end
  if #categories == 0 then
    -- aspoň beletrii můžeme detekovat podle signatury
    if rec.signatura:match("Be") then
      categories = {"Beletrie"}
    elseif rec.signatura:match("^C") then
      categories = {"Hudba"}
    else
      categories = {"Nezařazené"}
    end
  end
  return table.concat(categories, ", ")
end

-- sloučit záznamy s jednou signaturou do jednoho
local function join_callnos(records)
  local newrecords = {}
  for _, rec in ipairs(records) do
    -- print(rec.signatura)
    local base = callnobase(rec.signatura)
    local current = newrecords[base] or rec
    -- step counter
    current.count = (current.count or 0) + 1
    current.signatura = base
    current.name = make_name(rec)
    current.short = make_description(rec)
    current.description = ""
    current.categories = make_categories(rec)
    current.id = rec.ck -- carovy kod je genialni ID. teda doufám
    newrecords[base] = current
  end
  return newrecords
end


local function sort(records)
  -- convert key val records table back to numberical
  -- sort by callnos
  local newrecords = {}
  for _, rec in pairs(records) do
    newrecords[#newrecords+1] = rec
  end
  local function get_callno(a)
    local start, rest = a:match("(%d?[%a%-]+)(.+)")
    local number = tonumber(rest:match("^(%d+)"))
    return start, number
  end

  table.sort(newrecords, function(a,b) 
    local astart, ano = get_callno(a.signatura)
    local bstart, bno = get_callno(b.signatura)
    if astart == bstart then
      return ano < bno
    end
    return astart < bstart
  end)
  return newrecords
end

local function get_csv_line(rec)
  local t = {}
  for _, x in ipairs(rec) do
    if type(x) == "string" then
      x = '"' .. x .. '"'
    end
    t[#t+1] = x
  end
  return table.concat(t, ",")
end



local source_format =  "ck,sysno,rok,signatura,druh,nazev,autor,vydavatel,lokace,status,dilci,popis,isbn,datum_odpisu,konspekt"
local format = parser.parse_format(source_format) 
local f = parser.load_file(input)
local pos = parser.find_pos(f,
format)
parser.make_saves(pos)

local zaz = parser.parse(f)
local converted = convert(source_format, zaz) 
local joined = join_callnos(converted)
local sorted = sort(joined)

-- tiskni csv hlavičku
print(field_names)

-- zpracuj jednotlive zaznamy
for _, rec in ipairs(sorted) do
-- jen prvních pár záznamů
-- for i = 1, 20 do
  -- local rec = sorted[i]
  -- print(rec.id, rec.signatura, rec.categories)
  print(get_csv_line(new_csv_record(rec)))
end

